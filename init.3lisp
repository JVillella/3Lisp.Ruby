;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                                  ;;;
;;;   Ruby Implementation of 3Lisp   ;;;
;;;                                  ;;;
;;;          Version 1.00            ;;;
;;;                                  ;;;
;;;           2011-05-20             ;;;
;;;           Group of N             ;;;
;;;                                  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;
;;;  This file, called "init.3lisp", is loaded from the current working directory 
;;;  as 3LispR launches.
;;;
;;;  You can add definitions of your own, following DEFINE below. 
;;;  These procedures will be available after 3LispR is launched.
;;;
;;;  NOTE: because error messages from parsing and processing this 
;;;        file are suppressed, you might want to test a new definition 
;;;        first at the interactive prompt, before including it in this
;;;        file. 
;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Naming and Procedure Definition
;;


; DEFINE -- This makes DEFINE available in the global environment
;           through using REBIND, which is a primitive. Because
;           pretty much everything below uses DEFINE, this needs to 
;           be the first in the init.3lisp

(rebind 'define
  ↑(lambda reflect [[var def] env cont]
    (normalise def env 
      (lambda simple [def!] 
        (block 
          (rebind var def! global)
          (cont ↑var)))))
  global)

(define MACRO
  (lambda simple [def-env pattern body]
    ((lambda simple [expander]
       (lambda reflect [args env cont]
         (normalise (expander . args) env cont)))
     (simple def-env pattern body))))

(define LET
  (lambda macro [list body]
    `((lambda simple ,(map 1st list) ,body) . ,(map 2nd list))))

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;
; These are general utilities used in the definition of 
; the version of LET below.
;

(define 1STS
  (lambda simple [list]
    (cond
      [(empty list) ((vector-constructor list))]
      [$T (prep (1st (1st list)) (1sts (rest list)))])))

(define 2NDS
  (lambda simple [list]
    (cond
      [(empty list) ((vector-constructor list))]
      [$T (prep (2nd (1st list)) (2nds (rest list)))])))

(define MEMBER                                               
  (lambda simple [element vector]
    (cond [(empty vector) $F]
          [(= element (1st vector)) $T]
          [$T (member element (rest vector))])))

(define EXTERNAL (lambda simple [x]
  (member (type x) 
    ['sequence 'number 'truth-value 'function 'bindings])))

(define VECTOR-CONSTRUCTOR
  (lambda simple [template]
    (if (external template) scons rcons)))
;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(define LET                                                       ; performance of this version is 20% better than the above version that uses MAP
  (lambda macro [list body]
    `((lambda simple ,(1sts list) ,body) . ,(2nds list))))

;(define LET                                                      ; performance of this version is only slightly better that the above version.
;  (lambda reflect [[list body] env cont]
;    (normalise (2nds list) env 
;      (lambda simple [args!]
;        (normalise body (bind (1sts list) args! env) cont)))))

(define LETSEQ
  (lambda macro [list body]
    (if (empty list)
        body
        `(let [,(1st list)]
           (letseq ,(rest list) ,body)))))
           
(define LETREC
  (lambda macro [list body]
    `((lambda simple ,(map 1st list)
        (block
          (block . ,(map (lambda simple [x] `(set . ,x)) list))
          ,body))
      . ,(map (lambda simple [x] ''?) list))))


; LAMBDA -- provided as a kernel procedure

; SIMPLE -- provided as a kernel procedure

; REFLECT -- provided as a kernel procedure


(define REFLECT!
  (lambda simple [def-env pattern body]
    (let [[fun (simple def-env pattern body)]]
      (lambda reflect [args env cont]
        (normalise args env
          (lambda simple [args!]
            (fun args! env cont)))))))

(define Y-OPERATOR
  (lambda simple [fun]
    (let [[temp (lambda simple ? ?)]]
      (block (replace ↑temp ↑(fun temp)) temp))))
      
(define Y*-OPERATOR
  (lambda simple funs
    (let [[temps (map (lambda simple [fun] (lambda simple ? ?)) funs)]]
      (map (lambda simple [temp fun]
             (block (replace ↑temp ↑(fun . temps)) temp))
           temps
           funs))))

(define REFLECTIFY
  (lambda simple [fun]
    (reflect (environment-designator ↑fun) (pattern ↑fun) (body ↑fun))))

; DEFEIN -- this demonstrates that DEFINE or DEFEIN can be defined.

(define DEFEIN
  (lambda macro [label form]
    `(block (set ,label (y-OPERATOR (lambda simple [,label] ,form)))
            ,↑label)))

; SET -- assignment

(define SET
  (lambda reflect [[var exp] env cont]
    (normalise exp env
      (lambda simple [exp!]
        (block
          (rebind var exp! env)
          (cont ''ok))))))

(define SETREF
  (lambda REFLECT! [[var! binding!] env cont]
    (block (rebind ↓var! binding! env)
           (cont ''OK))))

;;
;; Naming and Procedure Definition
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Control Structure Utilities
;;

; IF -- provided as a kernel procedure
 
; COND -- provided as a kernel procedure

; COND-HELPER -- not needed in this implementation

; BLOCK -- provided as a kernel procedure

; BLOCK-HELPER -- not needed in this implementation

(define DO
  (lambda macro args
    (let [[loop-name (acons)]                                 
          [variables (map 1st (1st args))]
          [init (map 2nd (1st args))]
          [next (map 3rd (1st args))]
          [quitters (2nd args)]
          [body (if (double args) '$T (3rd args))]]
      `(letrec [[,loop-name
                 (lambda simple ,variables
                   (cond
                     . ,(append quitters
                                `[[$T (block ,body
                                             (,loop-name . ,next))]])))]]
         (,loop-name . ,init)))))

(define SELECT
  (lambda macro args
    (letseq [[dummy (acons)]
             [select-helper 
                (lambda simple [[choice action]]
                  (cond [(rail choice)
                         `[(member ,dummy ,choice) ,action]]
                        [(not (boolean choice))
                         `[(= ,dummy ,choice) ,action ]]
                        [$T `[,choice ,action]]))]]
      `(let [[,dummy ,(1st args)]]
          (cond . ,(map select-helper (rest args)))))))

(define SELECTQ
  (lambda macro args
    (letseq [[dummy (acons)]
             [selectq-helper
               (lambda simple [[choice action]]
                 (cond [(atom choice)
                        `[(= ,dummy ,↑choice) ,action]]
                       [(rail choice)
                        `[(member ,dummy ,↑choice) ,action]]
                       [$T `[,choice ,action]]))]]
      `(let [[,dummy ,(1st args)]]
          (cond . ,(map selectq-helper (rest args)))))))
        
        
(define CATCH
  (lambda reflect [[exp] env cont]
    (cont (normalise exp env id))))

(define THROW
  (lambda reflect! [[exp!] env cont] exp!))
  

(define DELAY                                                ; JL: Is this the right name?
  (lambda macro [exp]
    `(lambda simple [] ,exp)))

(define FORCE
  (lambda simple [delayed-exp]
    (delayed-exp)))

;;
;; Control Structure Utilities
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Vector Utilities
;;


;(define 1ST (lambda simple [vector] (nth 1 vector)))         ; a kernel utility
;(define 2ND (lambda simple [vector] (nth 2 vector)))         ; a kernel utility
(define 3RD (lambda simple [vector] (nth 3 vector)))
(define 4TH (lambda simple [vector] (nth 4 vector)))
(define 5TH (lambda simple [vector] (nth 5 vector)))
(define 6TH (lambda simple [vector] (nth 6 vector)))

(define LAST (lambda simple [vector] (nth (length vector) vector))) ; Not in manual

;(define REST (lambda simple [vector] (tail 1 vector)))       ; a kernel utility

(define FOOT (lambda simple [vector] (tail (length vector) vector)))

;(define UNIT (lambda simple [vec] (= 1 (length vec))))       ; a kernel utility & different from manual

(define DOUBLE (lambda simple [vec] (= 2 (length vec))))      ; different from manual

; Manual version: slow on short vectors
; (define DOUBLE (lambda simple [vec] (and (not (empty vec)) (unit (rest vec))))) 

(define MEMBER                                               
  (lambda simple [element vector]
    (cond [(empty vector) $F]
          [(= element (1st vector)) $T]
          [$T (member element (rest vector))])))

(define INDEX
  (lambda simple [element vector]
    (letrec [[index-helper 
              (lambda simple [vector-tail position]
                (cond [(empty vector-tail) 0]
                      [(= (1st vector-tail) element) position]
                      [$T (index-helper (rest vector-tail) (1+ position))]))]]
      (index-helper vector 1))))
      
(define VECTOR-CONSTRUCTOR
  (lambda simple [template]
    (if (external template) scons rcons)))

(define XCONS
  (lambda simple args
    (pcons (1st args) (rcons . (rest args)))))

(define MAP
  (lambda simple args
    (cond [(empty (2nd args)) ((vector-constructor (2nd args)))]
          [(double args)
           (prep ((1st args) (1st (2nd args)))
                 (map (1st args) (rest (2nd args))))]
          [$T (prep ((1st args) . (map 1st (rest args)))
                    (map . (prep (1st args) (map rest (rest args)))))])))

(define COPY-VECTOR
  (lambda simple [vector]
    (if (empty vector)
        ((vector-constructor vector))
        (prep (1st vector) (copy-vector (rest vector))))))
        
; CONCATENATE now a primitive based on join! of Rail.
;
;(define CONCATENATE
;  (lambda simple [rail1 rail2]
;    (block
;      (replace (foot rail1) rail2) ; this follows page 40, rather than the code given
;      rail1)))   

(define APPEND
  (lambda simple [vector1 vector2]
    (if (empty vector1)
        vector2
        (prep (1st vector1)
              (append (rest vector1) vector2)))))
              
(define APPEND*
  (lambda simple args
    (if (unit args)
        (1st args)
        (append (1st args) (append* . (rest args))))))
        
(define REVERSE
  (letrec [[rev (lambda simple [v1 v2]
                  (if (empty v1)
                      v2
                      (rev (rest v1) (prep (1st v1) v2))))]]
    (lambda simple [vector]
      (rev vector ((vector-constructor vector))))))


; these are no longer available because REPLACE of rails is banneds
;
;(define PUSH
;  (lambda simple [element stack]
;    (replace ↑stack
;             ↑(prep element
;                    (if (empty stack)
;                        (scons)
;                        (prep (1st stack) (rest stack)))))))
;                        
;(define POP
;  (lambda simple [stack]
;   (let [[top (1st stack)]]
;      (block
;        (replace ↑stack ↑(rest stack))
;        top))))

; the following reflective versions work OK enough, i.e. assuming 
; the second argumente is an atom 

(define PUSH
  (lambda reflect [[element stack] env cont]
    (cont ↑(rebind stack ↑(prep ↓(normalise element env id) ↓(binding stack env)) env))))

(define POP
  (lambda reflect [[stack] env cont]
    (let [[s ↓(binding stack env)]]
      (if (empty s)
          (error "Attempting to pop from an empty stack")
          (let [[top (1st s)]]
            (block
              (rebind stack ↑(rest s) env)
              (cont ↑top)))))))
;;
;; Vector Utilities
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Arithmetic Utilities
;;

(define 1+ (lambda simple [n] (+ n 1)))
(define 1- (lambda simple [n] (- n 1)))
(define zero (lambda simple [n] (= n 0)))

(define **                                ; m^n
  (lambda simple [m n]
    (do [[i 0 (1+ i)]
         [a 1 (* a m)]]
        [[(= i n) a]])))

(define REMAINDER
  (lambda simple [x y]
    (- x (* (/ x y) y))))
    
(define ABS
  (lambda simple [n]
    (if (< n 0) (- 0 n) n)))              ; 

(define MAX
  (lambda simple numbers
    (letrec [[max2
                (lambda simple [x y] (if (> x y) x y))]
             [max-helper
                (lambda simple [unseen-numbers maximum]
                  (if (empty unseen-numbers)
                      maximum
                      (max-helper (rest unseen-numbers)
                                  (max2 (1st unseen-numbers) maximum))))]]
      (max-helper (rest numbers) (1st numbers)))))


(define MIN
  (lambda simple numbers
    (letrec [[min2
                (lambda simple [x y] (if (< x y) x y))]
             [min-helper
                (lambda simple [unseen-numbers minimum]
                  (if (empty unseen-numbers)
                      minimum
                      (min-helper (rest unseen-numbers)
                                  (min2 (1st unseen-numbers) minimum))))]]
      (min-helper (rest numbers) (1st numbers)))))


(define ODD (lambda simple [n] (not (zero (remainder n 2)))))
(define EVEN (lambda simple [n] (zero (remainder n 2))))

(define NEGATIVE     (lambda simple [n] (<  n 0)))
(define NON-NEGATIVE (lambda simple [n] (>= n 0)))   ; >= provided primitively
(define POSITIVE     (lambda simple [n] (>  n 0)))
(define ZERO         (lambda simple [n] (= n 0)))


;;
;; Arithmetic Utilities
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; General Utilities
;;

;(define ATOM       (lambda simple [x] (= (type x) 'atom)))               ; a kernel utility 
;(define PAIR       (lambda simple [x] (= (type x) 'pair)))               ; a kernel utility

(define HANDLE      (lambda simple [x] (= (type x) 'handle)))
;(define RAIL       (lambda simple [x] (= (type x) 'rail)))
(define NUMERAL     (lambda simple [x] (= (type x) 'numeral)))
(define BOOLEAN     (lambda simple [x] (= (type x) 'boolean)))
(define CLOSURE     (lambda simple [x] (= (type x) 'closure)))
(define ENVIRONMENT (lambda simple [x] (= (type x) 'environment)))  
(define STREAMER    (lambda simple [x] (= (type x) 'streamer)))

(define SEQUENCE    (lambda simple [x] (= (type x) 'sequence)))
(define NUMBER      (lambda simple [x] (= (type x) 'number)))
(define TRUTH-VALUE (lambda simple [x] (= (type x) 'truth-value)))
(define FUNCTION    (lambda simple [x] (= (type x) 'function)))
(define BINDINGS    (lambda simple [x] (= (type x) 'bindings)))
(define STREAMER    (lambda simple [x] (= (type x) 'stream)))

(define VECTOR      (lambda simple [x] (member (type x) ['rail 'sequence])))

(define INTERNAL    (lambda simple [x] 
                      (member (type x)
                              ['atom 'pair 
                               'handle 
                               'rail 'numeral 'boolean 'closure
                               'environment 'streamer])))

(define EXTERNAL    (lambda simple [x]
                      (member (type x) 
                              ['sequence 'number 'truth-value 'function
                               'bindings 'stream])))

(define REFERENT
  (lambda reflect! [[exp! env!] env cont]
    (normalise ↓exp! ↓env! cont)))

(define MACRO-EXPANDER
  (lambda simple [macro-closure]
    ↓(binding 'expander ↓(environment-designator ↑macro-closure))))

(define ID (lambda simple [x] x))

(define ID* (lambda simple x x))

(define QUOTE (lambda reflect [[a] e c] (c ↑a)))


(define ISOMORPHIC
  (lambda simple [e1 e2]
    (cond [(not (= (type e1) (type e2))) $F]
          [(= e1 e2) $T]
          [(rail e1)
           (or (and (empty e1) (empty e2))
               (and (not (empty e1))
                    (not (empty e2))
                    (isomorphic (1st e1) (1st e2))
                    (isomorphic (rest e1) (rest e2))))]
          [(pair e1)
           (and (isomorphic (car e1) (car e2))
                (isomorphic (cdr e1) (cdr e2)))]
          [(closure e1)
           (and (isomorphic (procedure-type e1)
                            (procedure-type e2))
                (isomorphic (pattern e1) (pattern e2))
                (isomorphic (body e1) (body e2))
                (isomorphic (environment-designator e1)
                            (environment-designator e2)))]
          [(handle e1) (isomorphic ↓e1 ↓e2)]
          [(environment e1) 
           (do [[e1-atoms (bound-atoms e1) (rest e1-atoms)] 
                [e2-atoms (bound-atoms e2) (rest e2-atoms)]]
               [[(empty e1-atoms) $T] 
                [(not (isomorphic (1st e1-atoms) (1st e2-atoms))) $F]
                [(not (isomorphic (binding (1st e1-atoms) e1) (binding (1st e2-atoms) e2))) $F]])]
          [$T $F])))



; Replacing tail is now banned
;
;(define RPLACT 
;  (lambda simple [n rail new-tail]
;    (replace (tail n rail) new-tail)))
 
; RLACN is now a primitive 
;
;(define RPLACN
;  (lambda simple [n rail new-element]
;    (replace (tail (- n 1) rail) (prep new-element (tail n rail)))))
    
(define RPLACA
  (lambda simple [pair new-car]
    (replace pair (pcons new-car (cdr pair)))))

(define RPLACD
  (lambda simple [pair new-cdr]
    (replace pair (pcons (car pair) new-cdr))))

(define NOT (lambda simple [b] (if b $F $T)))

(define AND 
  (lambda reflect [args env cont]
    (if (rail args)
        (and-helper args env cont)
        (normalise args env
          (lambda simple [args!]
            (and-helper args! env cont))))))

(define AND-HELPER
  (lambda simple [args env cont]
    (if (empty args)
        (cont '$T)
        (normalise (1st args) env
          (lambda simple [premise!]
            (if ↓premise!
                (and-helper (rest args) env cont)
                (cont '$F)))))))

(define OR 
  (lambda reflect [args env cont]
    (if (rail args)
        (or-helper args env cont)
        (normalise args env
          (lambda simple [args!]
            (or-helper args! env cont))))))

(define OR-HELPER
  (lambda simple [args env cont]
    (if (empty args)
        (cont '$F)
        (normalise (1st args) env
          (lambda simple [premise!]
            (if ↓premise!
                (cont '$T)
                (or-helper (rest args) env cont)))))))

;;
;; General Utilities
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Special I/O and System Utilities  
;;

(define PRINTLN
  (lambda simple args 
    (block
      (print . args)
      (newline))))


(define edit
  (lambda simple args
    (let [[file (if (> (length args) 0) (1st args) "temp.3lisp")]
          [editor (if (> (length args) 1) (2nd args) "vi")]]
      (sys editor file))))

(define editsource
  (lambda simple args
    (let [[file (if (> (length args) 0) (1st args) "temp.3lisp")]
          [editor (if (> (length args) 1) (2nd args) "vi")]]
      (block 
        (sys editor file) 
        (source file)))))
  
(define edex
  (lambda reflect [args env cont]
    (cont (normalise-rail (parse (editsource . ↓args)) env id))))

(define exec
  (lambda reflect [args env cont]
    (cont (normalise-rail (parse (source . ↓args)) env id))))


;(define pp ; pretty print is still a piece of work in progress ...
;  (lambda simple [exp]
;    (select (type exp)
;      [['atom 'numeral 'boolean 'rail] (print exp)]
;      ['environment DO_STH]
;      ['closure DO_STH]
;      ['pair Deal_with_cond/let/select/define/lambda/if/block/do]
;      [$T (print exp)])))
    

;;
;; 
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; A version of the RPP normalising arguments R-to-L 
;;                  due to B.C.S.
;;
;; J.L. has found this one very useful in debugging
;; and benchmarking.
;;

(define normalise#
  (lambda simple [exp env cont]
    (cond [(normal exp) (cont exp)]
          [(atom exp) (cont (binding exp env))]
          [(rail exp) (normalise-rail# exp env cont)]
          [(pair exp) (reduce# (car exp) (cdr exp) env cont)])))

(define reduce#
  (lambda simple [proc args env cont]
    (normalise# proc env
      (lambda simple [proc!]
        (if (reflective proc!)
            (↓(de-reflect proc!) args env cont)
            (normalise# args env ; JL: changed "normalise" to "normalise#"
              (lambda simple [args!]
                (if (primitive proc!)
                    (cont ↑(↓proc! . ↓args!))
                    (normalise#
                       (body proc!)
                       (bind (pattern proc!) args! (environment-of proc!))
                       cont)))))))))


(define normalise-rail#
  (lambda simple [rail env cont]
     (if (empty rail)
         (cont rail)
         (normalise-rail# (rest rail) env
            (lambda simple [rest!]
               (normalise# (1st rail) env
                  (lambda simple [first!]
                     (cont (prep first! rest!)))))))))
                     
(define block#
  (lambda reflect [clauses env cont]
    (normalise-rail# clauses env 
      (lambda simple [clauses!]
        (cont (nth (length clauses!) clauses!))))))

;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define VERSION
  (lambda simple [] "3Lisp Ruby Implementation, Version 1.00, May 20, 2011"))

    
;;; THE END ;;;